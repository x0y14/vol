# 関数に引数を渡すときには、bpとspを動かしたくない（復元可能でなければならない）という信念がある
# なぜなら、ずれてしまうと、ループ中にどっか行ったり、まぁ、全ての値がズレるから。

push 11 # sub(11)の、11
call sub # 実際に呼び出す

# この状態だと、spの位置が一個ずれる。
# bpは復元される。
# これだといけません（復元されてない）
add_sp 1
exit # プログラム終わり

# で、これ関数
sub:
    # 今のbpの位置スタックに保存(復元用、popで取り出せる。)
    push bp
    # spからデータを取り出すとき、popを使ってしまうと、spが動いてしまう。ので、bpを使用して、相対的に取り出したい。
    # ので、spをbpにコピー(一個前で、bpは保存してるから平気)
    cp sp bp

    # スタックに保存されてる引数のデータをreg_aにコピー(subっていう関数のメイン機能)
    # cp [bp+1] reg_a <- 誤ったコード。
    cp [bp+2] reg_a # <- 正しいコード。callで、stackに、戻りアドレスがセットされているので、一個深くなる

    cp bp sp # bpを使用して、相対的に取り出すために使用したデータを元に戻す
    pop bp # 元のbpをスタックから取りだし、bpにセットする
    ret # 関数終わり